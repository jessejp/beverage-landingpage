---
import Slide from "../components/Slide.astro";

import Arrow from "/arrow-left.svg?raw";

const slides = [
  {
    name: "Slide 1",
    color: "#ffff00",
    image: "https://placedog.net/450/600?id=1",
  },
  {
    name: "Slide 2",
    color: "#0000ff",
    image: "https://placedog.net/450/600?id=2",
  },
  {
    name: "Slide 3",
    color: "#ffff00",
    image: "https://placedog.net/450/600?id=3",
  },
  {
    name: "Slide 4",
    color: "#0000ff",
    image: "https://placedog.net/450/600?id=4",
  },
  {
    name: "Slide 5",
    color: "#ffff00",
    image: "https://placedog.net/450/600?id=5",
  },
  {
    name: "Slide 6",
    color: "#0000ff",
    image: "https://placedog.net/450/600?id=6",
  },
];
const slidesAmount = slides.length;
const slidesWithClones = [
  slides[slidesAmount - 3],
  slides[slidesAmount - 2],
  slides[slidesAmount - 1],
  ...slides,
  slides[0],
  slides[1],
  slides[2],
];
---

<section class="center interlude">
  <div class="carousel-wrapper">
    <button class="slide-button-container prev">
      <Fragment set:html={Arrow} />
    </button>
    <div class="carousel">
      {slidesWithClones.map((slide) => <Slide {...slide} />)}
    </div>
    <button class="slide-button-container next">
      <Fragment set:html={Arrow} />
    </button>
  </div>

  <style>
    section.center {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      padding: 2em 0;
    }

    section.interlude {
      background: #b8ad95;
    }
    .carousel-wrapper {
      position: relative;
      display: flex;
      flex-direction: row;
      width: 100%;
      justify-content: space-evenly;
      background: inherit;
    }

    .slide-button-container {
      width: 3em;
      background: #ffffff88;
      border: none;
      position: absolute;
      height: 3em;
      z-index: 1;
      border-radius: 100%;
      top: 45%;
    }
    .slide-button-container:focus {
      outline: auto;
    }
    .slide-button-container:hover {
      background: #ffffffce;
    }
    .slide-button-container:active {
      background: #17c3b2e3;
    }

    .slide-button-container.prev {
      left: 1em;
    }
    .slide-button-container.next {
      right: 1em;
      transform: scaleX(-1);
    }

    .carousel {
      display: flex;
      transition: transform 0.2s ease;
      width: 100vw;
      height: 32em;
    }
  </style>

  <script>
    const carousel: HTMLElement = document.querySelector(".carousel");
    const slideElement: HTMLElement = carousel.querySelector(".slide");
    let slideWidthOffset = updateSlideWidthOffset(slideElement);
    let isDragging = false;
    let startPos = slideWidthOffset * -2;
    let currentTranslate = slideWidthOffset * -2;
    let prevTranslate = slideWidthOffset * -2;

    carousel.addEventListener("mousedown", dragStart);
    carousel.addEventListener("touchstart", dragStart);
    carousel.addEventListener("mouseup", dragEnd);
    carousel.addEventListener("touchend", dragEnd);
    carousel.addEventListener("mousemove", drag);
    carousel.addEventListener("touchmove", drag);

    function updateSlideWidthOffset(element) {
      return element.offsetWidth;
    }

    function dragStart(event) {
      if (event.type === "touchstart") {
        startPos = event.touches[0].clientX;
      } else {
        startPos = event.clientX;
        document.body.style.cursor = "grabbing";
      }
      isDragging = true;
      prevTranslate = currentTranslate;
    }

    function drag(event) {
      if (isDragging) {
        let currentPosition = 0;
        if (event.type === "touchmove") {
          currentPosition = event.touches[0].clientX;
        } else {
          currentPosition = event.clientX;
        }
        const diff = currentPosition - startPos;
        currentTranslate = prevTranslate + diff;
        snapToSlide();
      }
    }

    function dragEnd() {
      isDragging = false;
      document.body.style.cursor = "grab";
    }

    function moveCarousel(translateAmount) {
      currentTranslate = currentTranslate - translateAmount;
      snapToSlide();
    }

    function snapToSlide() {
      slideWidthOffset = updateSlideWidthOffset(slideElement);
      const slidesAmount = carousel.querySelectorAll(".slide").length;
      // Division by 1 returns too large of a value, so we divide by half of 3
      const breakPoint = carousel.offsetWidth === slideWidthOffset ? 1.5 : 3;
      const minRange = -slideWidthOffset * 2; // Second slide
      const maxRange = -slideWidthOffset * slidesAmount + slideWidthOffset * 5; // Second to last slide

      const newPosition =
        Math.round(currentTranslate / slideWidthOffset) * slideWidthOffset;

      currentTranslate = newPosition;
      carousel.style.transform = `translateX(${currentTranslate}px)`;

      if (newPosition > minRange) {
        console.log("min breakpoint");
        setTimeout(() => {
          carousel.style.transition = "none";
          currentTranslate = maxRange;
          carousel.style.transform = `translateX(${currentTranslate}px)`;
          setTimeout(() => {
            carousel.style.transition = "transform 0.2s ease";
          }, 50);
        }, 210);
      } else if (newPosition < maxRange) {
        console.log("max breakpoint");
        setTimeout(() => {
          carousel.style.transition = "none";
          currentTranslate = minRange;
          carousel.style.transform = `translateX(${currentTranslate}px)`;
          setTimeout(() => {
            carousel.style.transition = "transform 0.2s ease";
          }, 50);
        }, 210);
      }
    }

    carousel.addEventListener("transitionend", snapToSlide);
    window.addEventListener("resize", snapToSlide);
    snapToSlide();

    const prevButton = document.querySelector(".slide-button-container.prev");
    const nextButton = document.querySelector(".slide-button-container.next");
    prevButton.addEventListener("click", moveCarousel.bind(this, -slideWidthOffset));
    nextButton.addEventListener("click", moveCarousel.bind(this, slideWidthOffset));
    // Optional: Auto-rotate slides every 3 seconds
    setInterval(moveCarousel.bind(this, slideWidthOffset), 2500);
  </script>
</section>
